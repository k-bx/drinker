module drinker where

-- drinker (A : U) (B : A -> U) (a : A) (b : B a) (x : A) : B x
--   = ?

-- drinker (A : U) (B : A -> U) (x : A) : ((x : A) * ((y : B x) -> (z : A) -> B z))
--   = (x, (\(y : B x) -> ?))


-- prelude.ctt

-- "Absurd" or "Impossible" type
data N0 =

efq (A : U) : N0 -> A = split {}
neg (A : U) : U = A -> N0

data or (A B : U) = inl (a : A)
                  | inr (b : B)

dec (A : U) : U = or A (neg A)

stable (A:U) : U = neg (neg A) -> A

-- /prelude.ctt

-- "Either all items satisfy given property, or I'll give you a counter-example"
-- To be proven later
allOrCounterex (A : U) (D : A -> U)
  : (or ((x : A) -> D x) ((x : A) * (neg (D x))))
  = undefined

-- stableRelationBasic (A : U) (B : A -> U) (a : B a) : U = neg (neg (B a)) -> B a
stableRelationBasic (A : U) (B : A -> U) (a : A) : U = neg (neg (B a)) -> B a

-- "There does not exist such (x : A) that (B x) => For all (x : A) (not (B x))"
stableRelation (A : U) (B : A -> U)
  : (neg ((x : A) * (B x)))
  -> ((x : A) -> neg (B x))
  = undefined

-- probably expressable via stableRelation plus stableRelationBasic
stableRelationNeg (A : U) (B : A -> U)
  : (neg ((x : A) * (neg (B x))))
  -> ((x : A) -> neg (neg (B x)))
  = undefined

allOrCounterex2 (A : U) (D : A -> U) (inhabitant : A)
  (stbl : (x : A) -> stableRelationBasic A D x)
  : (dec ((q : A) * (neg (D q))))
  -> (or ((x : A) -> D x) ((x : A) * (neg (D x))))
  = split
  inl qAndNotD -> inr qAndNotD
  inr notQAndNotD -> inl (\(y : A) -> stbl y (stableRelationNeg A D notQAndNotD y))

-- * Solution #1, via efq and neg from prelude

-- continuation 1
drinkerViaEfqC1 (A : U) (D : A -> U) (x : A)
  : (or ((q : A) -> D q) ((q : A) * (neg (D q))))
  -> ((x : A) * ((y : D x) -> (z : A) -> D z))
  = split
  inl allD -> (x, (\(_ : D x) -> \(z : A) -> allD z))
  inr pair -> (pair.1, \(y : D pair.1) -> \(z : A) -> efq (D z) (pair.2 y))

-- solution via efq
drinkerViaEfq (A : U) (D : A -> U) (x : A)
  : ((x : A) * ((y : D x) -> (z : A) -> D z))
  = drinkerViaEfqC1 A D x (allOrCounterex A D)

-- * Solution #2, via manual Either N0

-- continuation 1
drinkerViaEitherAbsurdC1 (A : U) (D : A -> U) (x : A)
  : (or ((q : A) -> D q) ((q : A) * (D q -> N0)))
  -> ((x : A) * ((y : D x) -> (z : A) -> or N0 (D z)))
  = split
  inl allD -> (x, (\(_ : D x) -> \(z : A) -> inr (allD z)))
  inr pair -> (pair.1, \(y : D pair.1) -> \(_ : A) -> inl (pair.2 y))

-- Solution via Either Absurd
drinkerViaEitherAbsurd (A : U) (D : A -> U) (x : A)
  : ((x : A) * ((y : D x) -> (z : A) -> or N0 (D z)))
  = drinkerViaEitherAbsurdC1 A D x (allOrCounterex A D)

-- * First attempts, not sure if useful

--
-- drinker (A : U) (D : A -> U) (x : A)
--   : ((x : A) * ((y : D x) -> (z : A) -> D z))
--   = (x, (\(y : D x) -> \(z : A) -> ?))

-- drinker2c2 (A : U) (D : A -> U) (x : A)
--   : ((q : A) * (D q -> Absurd))
--   -> ((x : A) * ((y : D x) -> (z : A) -> D z))
--   = split
--   (q, qNotD) -> ?

