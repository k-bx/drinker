module drinker_de_morgan where

-- "Absurd" or "Impossible" type
data N0 =

efq (A : U) : N0 -> A = split {}
neg (A : U) : U = A -> N0

data or (A B : U) = inl (a : A)
                  | inr (b : B)

-- One of "De Morgan" laws
-- not (forall x -> D x) == exists x such that (not (D x))
-- e.g.
deMorgan (A : U) (D : A -> U)
  : (neg ((x : A) -> D x)) -> ((x : A) * (neg (D x)))
  = undefined

-- law of excluded middle
lem (A : U)
  : or A (neg A)
  = undefined

-- continuation 1
allOrCounterexViaDemorganC1 (A : U) (D : A -> U)
  : (ff : or ((x : A) -> D x) (neg ((x : A) -> D x)))
  -> (or ((x : A) -> D x) ((x : A) * (neg (D x))))
  = split
  inl f -> inl f
  inr f -> inr (deMorgan A D f)

-- "Either all items satisfy given property, or I'll give you a counter-example"
allOrCounterexViaDemorgan (A : U) (D : A -> U)
  : (or ((x : A) -> D x) ((x : A) * (neg (D x))))
  = allOrCounterexViaDemorganC1 A D (lem ((x : A) -> D x))

-- continuation 1
drinkerViaEfqC1 (A : U) (D : A -> U) (x : A)
  : (or ((q : A) -> D q) ((q : A) * (neg (D q))))
  -> ((x : A) * ((y : D x) -> (z : A) -> D z))
  = split
  inl allD -> (x, (\(_ : D x) -> \(z : A) -> allD z))
  inr pair -> (pair.1, \(y : D pair.1) -> \(z : A) -> efq (D z) (pair.2 y))

-- solution via efq
drinkerViaEfq (A : U) (D : A -> U) (x : A)
  : ((x : A) * ((y : D x) -> (z : A) -> D z))
  = drinkerViaEfqC1 A D x (allOrCounterexViaDemorgan A D)
